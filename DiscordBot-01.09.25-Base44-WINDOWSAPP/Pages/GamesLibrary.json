import React, { useState, useEffect, useCallback } from "react";
import { Game } from "@/entities/Game";
import { User } from "@/entities/User";
import { Search, Filter, Gamepad2, Send } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import GameCard from "../components/library/GameCard";
import GameFilters from "../components/library/GameFilters";
import { sendDiscordEmbed } from "../components/discord/DiscordSender";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle, CheckCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

export default function GamesLibrary() {
  const [games, setGames] = useState([]);
  const [filteredGames, setFilteredGames] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filters, setFilters] = useState({
    piattaforma: "all",
    genere: "all"
  });
  const [feedback, setFeedback] = useState(null);
  const [sendingGameId, setSendingGameId] = useState(null);

  const applyFilters = useCallback(() => {
    let filtered = games.filter(game =>
      game.titolo.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (filters.piattaforma !== "all") {
      filtered = filtered.filter(game => game.piattaforma === filters.piattaforma);
    }
    if (filters.genere !== "all") {
      filtered = filtered.filter(game => game.genere === filters.genere);
    }
    
    setFilteredGames(filtered);
  }, [games, searchTerm, filters]);

  useEffect(() => {
    loadGames();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  const loadGames = async () => {
    setIsLoading(true);
    const data = await Game.list("-created_date");
    setGames(data);
    setIsLoading(false);
  };
  
  const handleSendToDiscord = async (game) => {
    setSendingGameId(game.id);
    setFeedback(null);
    try {
      const currentUser = await User.me();
      if (!currentUser?.discord_webhook_url) {
        setFeedback({ type: 'error', message: "URL Webhook non configurato. Vai su Impostazioni." });
        return;
      }
      const result = await sendDiscordEmbed(currentUser.discord_webhook_url, game);
      if (result.success) {
        setFeedback({ type: 'success', message: `"${game.titolo}" inviato a Discord!` });
      } else {
        setFeedback({ type: 'error', message: result.message });
      }
    } catch (error) {
      setFeedback({ type: 'error', message: "Impossibile ottenere le informazioni utente." });
    } finally {
      setSendingGameId(null);
      setTimeout(() => setFeedback(null), 5000);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-center gap-4">
        <h1 className="text-3xl font-bold text-foreground">Libreria Giochi</h1>
        <div className="relative w-full md:w-64">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Cerca un gioco..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9 bg-secondary"
          />
        </div>
      </div>
      
      {feedback && (
          <Alert variant={feedback.type === 'error' ? 'destructive' : 'default'} className={feedback.type === 'success' ? 'bg-green-500/10 border-green-500/20' : ''}>
            {feedback.type === 'success' ? <CheckCircle className="h-4 w-4" /> : <AlertTriangle className="h-4 w-4" />}
            <AlertDescription>{feedback.message}</AlertDescription>
          </Alert>
        )}

      <GameFilters filters={filters} setFilters={setFilters} games={games} />

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        {isLoading ? (
          Array(10).fill(0).map((_, i) => <Skeleton key={i} className="h-64 rounded-lg" />)
        ) : (
          filteredGames.map((game) => (
            <GameCard 
              key={game.id} 
              game={game} 
              isSending={sendingGameId === game.id}
              onSendToDiscord={() => handleSendToDiscord(game)}
            />
          ))
        )}
      </div>

      {!isLoading && filteredGames.length === 0 && (
        <div className="text-center py-16 col-span-full">
          <Gamepad2 className="w-16 h-16 mx-auto text-muted-foreground mb-4" />
          <h3 className="text-xl font-semibold mb-2">Nessun gioco trovato</h3>
          <p className="text-muted-foreground">Prova a modificare i filtri o la ricerca.</p>
        </div>
      )}
    </div>
  );
}